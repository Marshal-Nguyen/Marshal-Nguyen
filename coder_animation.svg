<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 800 400">
  <defs>
    <style>
      @keyframes float {
        0%, 100% { transform: translateY(0px); }
        50% { transform: translateY(-15px); }
      }
      @keyframes typing {
        0%, 100% { width: 0; }
        50% { width: 180px; }
      }
      @keyframes blink {
        0%, 100% { opacity: 1; }
        50% { opacity: 0; }
      }
      @keyframes pulse {
        0%, 100% { opacity: 0.7; }
        50% { opacity: 1; }
      }
      @keyframes rotate {
        0% { transform: rotateY(0deg); }
        100% { transform: rotateY(360deg); }
      }
      @keyframes fadeInOut {
        0%, 100% { opacity: 0.2; }
        50% { opacity: 0.9; }
      }
      @keyframes codeFlow {
        0% { transform: translateY(0); }
        100% { transform: translateY(-100px); }
      }
      @keyframes gradientFlow {
        0% { stop-color: #3178C6; }
        50% { stop-color: #61DAFB; }
        100% { stop-color: #3178C6; }
      }
      .floating {
        animation: float 6s ease-in-out infinite;
      }
      .typing-container {
        position: relative;
        width: 180px;
        overflow: hidden;
      }
      .typing-text {
        white-space: nowrap;
        overflow: hidden;
        animation: typing 4s steps(20) infinite;
      }
      .cursor {
        position: absolute;
        right: 0;
        width: 2px;
        height: 20px;
        background-color: #ffffff;
        animation: blink 1s step-end infinite;
      }
      .screen {
        animation: pulse 4s infinite;
      }
      .cube {
        animation: rotate 10s linear infinite;
        transform-style: preserve-3d;
      }
      .code-line {
        animation: fadeInOut 3s infinite;
        animation-delay: calc(var(--delay) * 0.5s);
      }
      .flowing-code {
        animation: codeFlow 10s linear infinite;
      }
      .gradient-flow {
        animation: gradientFlow 5s ease-in-out infinite;
      }
    </style>
    
    <!-- Gradients -->
    <linearGradient id="screenGlow" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" stop-color="#3178C6" class="gradient-flow" />
      <stop offset="100%" stop-color="#61DAFB" />
    </linearGradient>
    
    <linearGradient id="deskGradient" x1="0%" y1="0%" x2="100%" y2="0%">
      <stop offset="0%" stop-color="#2C3E50" />
      <stop offset="100%" stop-color="#1A252F" />
    </linearGradient>
    
    <linearGradient id="bgGradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" stop-color="#0F172A" />
      <stop offset="100%" stop-color="#1E293B" />
    </linearGradient>
    
    <filter id="glow" x="-20%" y="-20%" width="140%" height="140%">
      <feGaussianBlur stdDeviation="5" result="blur" />
      <feComposite in="SourceGraphic" in2="blur" operator="over" />
    </filter>
  </defs>
  
  <!-- Background -->
  <rect width="800" height="400" fill="url(#bgGradient)" />
  
  <!-- Particles/Code Background -->
  <g class="flowing-code" opacity="0.1">
    <text x="50" y="50" fill="#61DAFB" font-family="monospace" font-size="12">&lt;React.Fragment&gt;</text>
    <text x="150" y="80" fill="#E44D26" font-family="monospace" font-size="12">&lt;div className="app"&gt;</text>
    <text x="200" y="110" fill="#F0DB4F" font-family="monospace" font-size="12">const [state, setState] = useState();</text>
    <text x="70" y="140" fill="#61DAFB" font-family="monospace" font-size="12">useEffect(() => { /* ... */ }, []);</text>
    <text x="120" y="170" fill="#3178C6" font-family="monospace" font-size="12">interface Props { data: string; }</text>
    <text x="90" y="200" fill="#E44D26" font-family="monospace" font-size="12">&lt;Component props={data} /&gt;</text>
    <text x="180" y="230" fill="#F0DB4F" font-family="monospace" font-size="12">return () => cleanup();</text>
    <text x="50" y="260" fill="#61DAFB" font-family="monospace" font-size="12">&lt;/div&gt;</text>
    <text x="100" y="290" fill="#3178C6" font-family="monospace" font-size="12">&lt;/React.Fragment&gt;</text>
    
    <text x="500" y="70" fill="#F0DB4F" font-family="monospace" font-size="12">import React from 'react';</text>
    <text x="550" y="100" fill="#3178C6" font-family="monospace" font-size="12">type State = { loading: boolean; }</text>
    <text x="470" y="130" fill="#61DAFB" font-family="monospace" font-size="12">export const Component = () => {</text>
    <text x="520" y="160" fill="#E44D26" font-family="monospace" font-size="12">return &lt;div&gt;Hello&lt;/div&gt;;</text>
    <text x="490" y="190" fill="#F0DB4F" font-family="monospace" font-size="12">}</text>
    <text x="570" y="220" fill="#61DAFB" font-family="monospace" font-size="12">&lt;TailwindProvider&gt;</text>
    <text x="600" y="250" fill="#3178C6" font-family="monospace" font-size="12">await asyncFunction();</text>
    <text x="520" y="280" fill="#E44D26" font-family="monospace" font-size="12">&lt;/TailwindProvider&gt;</text>
  </g>
  
  <!-- Desk -->
  <rect x="200" y="300" width="400" height="30" rx="5" fill="url(#deskGradient)" />
  
  <!-- Computer Setup -->
  <g class="floating">
    <!-- Monitor Base -->
    <rect x="350" y="270" width="100" height="30" rx="5" fill="#1A1A1A" />
    <rect x="380" y="260" width="40" height="10" rx="2" fill="#0F0F0F" />
    
    <!-- Monitor Frame -->
    <rect x="320" y="120" width="160" height="140" rx="5" fill="#0F0F0F" />
    
    <!-- Monitor Screen -->
    <rect x="330" y="130" width="140" height="120" rx="2" fill="#0A0A16" class="screen" />
    <rect x="330" y="130" width="140" height="120" rx="2" fill="url(#screenGlow)" opacity="0.3" filter="url(#glow)" />
    
    <!-- Code on Screen -->
    <g class="typing-container" transform="translate(340, 145)">
      <text class="typing-text" font-family="monospace" font-size="10" fill="#61DAFB">&lt;div className="awesome"&gt;</text>
      <rect class="cursor" x="180" y="0" width="2" height="10" fill="white" />
    </g>
    
    <text x="340" y="165" font-family="monospace" font-size="10" fill="#F0DB4F" class="code-line" style="--delay: 1">  const [data, setData] = useState();</text>
    <text x="340" y="180" font-family="monospace" font-size="10" fill="#3178C6" class="code-line" style="--delay: 2">  const handleClick = () => {</text>
    <text x="340" y="195" font-family="monospace" font-size="10" fill="#E44D26" class="code-line" style="--delay: 3">    setData(newValue);</text>
    <text x="340" y="210" font-family="monospace" font-size="10" fill="#61DAFB" class="code-line" style="--delay: 4">  }</text>
    <text x="340" y="225" font-family="monospace" font-size="10" fill="#F0DB4F" class="code-line" style="--delay: 5">&lt;/div&gt;</text>
    
    <!-- 3D Tech Cube -->
    <g class="cube" transform="translate(600, 180)">
      <!-- Cube Faces -->
      <rect x="-30" y="-30" width="60" height="60" fill="#61DAFB" opacity="0.8" rx="5" />
      <text x="-15" y="5" font-family="monospace" font-weight="bold" font-size="18" fill="white">JS</text>
      
      <rect x="-20" y="-20" width="40" height="40" fill="#3178C6" opacity="0.8" rx="5" transform="translate(0, -10)" />
      <text x="-15" y="-10" font-family="monospace" font-weight="bold" font-size="18" fill="white">TS</text>
      
      <rect x="-15" y="-15" width="30" height="30" fill="#E44D26" opacity="0.8" rx="5" transform="translate(10, 5)" />
      <text x="0" y="10" font-family="monospace" font-weight="bold" font-size="14" fill="white">H5</text>
    </g>
    
    <!-- Coffee Mug -->
    <g transform="translate(680, 280)">
      <rect x="-15" y="-30" width="30" height="30" rx="3" fill="#6F4E37" />
      <rect x="-12" y="-27" width="24" height="24" rx="2" fill="#432616" />
      <path d="M15,-15 C25,-15 25,-5 25,-5 L25,0 L-15,0 L-15,-15" fill="#6F4E37" />
      <ellipse cx="0" cy="0" rx="15" ry="5" fill="#432616" />
      <path d="M-12,-24 C-5,-25 -5,-20 -12,-18" stroke="#FFFFFF" stroke-width="1.5" fill="none" opacity="0.3" />
    </g>
    
    <!-- Code Notes -->
    <g transform="translate(240, 280)">
      <rect x="-30" y="-40" width="60" height="40" fill="#FFFFFF" opacity="0.9" />
      <rect x="-30" y="-40" width="60" height="10" fill="#61DAFB" opacity="0.7" />
      <line x1="-25" y1="-22" x2="25" y2="-22" stroke="#333333" opacity="0.3" />
      <line x1="-25" y1="-12" x2="15" y2="-12" stroke="#333333" opacity="0.3" />
      <line x1="-25" y1="-2" x2="20" y2="-2" stroke="#333333" opacity="0.3" />
    </g>
  </g>
  
  <!-- Title -->
  <text x="400" y="370" font-family="'Arial', sans-serif" font-size="24" font-weight="bold" text-anchor="middle" fill="white">Frontend Developer & UI/UX Designer</text>
  
  <!-- Glasses -->
  <g transform="translate(400, 90)" class="floating" style="animation-delay: -2s">
    <rect x="-60" y="-10" width="120" height="20" rx="10" fill="none" stroke="#61DAFB" stroke-width="4" opacity="0.7" />
    <rect x="-90" y="-10" width="30" height="5" rx="2" fill="none" stroke="#61DAFB" stroke-width="3" opacity="0.7" />
    <rect x="60" y="-10" width="30" height="5" rx="2" fill="none" stroke="#61DAFB" stroke-width="3" opacity="0.7" />
  </g>
</svg>
